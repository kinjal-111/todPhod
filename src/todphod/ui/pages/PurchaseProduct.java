
package todphod.ui.pages;

import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.swing.AutoCompleteSupport;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import todphod.core.ImageUtils;
import todphod.core.Product;
import todphod.core.Purchase;
import todphod.core.Supplier;
import todphod.ui.UIUtils;
import todphod.utilities.TOClient;



public class PurchaseProduct extends javax.swing.JPanel {
    private Map<String, Integer> suppliers;
    private Map<String, Integer> products;
    private BufferedImage bufferedImage;
    
    /**
     * Creates new form AddCustomer
     */
    public PurchaseProduct() {
        initComponents();
        this.setSize(1090, 750);
        
        this.getAllSuppliers();
        this.getAllProducts();
        this.customInitComponents();
    }
    
    private void getAllSuppliers() {
        this.suppliers = new HashMap<>();
        Supplier supplier = new Supplier();
        Map<Integer, Supplier> supplierMap = supplier.getAllSuppliers();
        
        String suppliers[] = new String[supplierMap.keySet().size()];
        int index = 0;
        for(Map.Entry<Integer, Supplier> supplierEntry : supplierMap.entrySet()) {
            String name = supplierEntry.getValue().getSupplierName();
            int id = supplierEntry.getKey();
            
            suppliers[index++] = name;
            this.suppliers.put(name, id);
        }
        
        AutoCompleteSupport.install(this.jcbSuppliers, GlazedLists.eventListOf(suppliers));
    }
    
    private void getAllProducts() {
        this.products = new HashMap<>();
        Product product = new Product();
        Map<Integer, Product> supplierMap = product.getAllProducts();
        
        String products[] = new String[supplierMap.keySet().size()];
        int index = 0;
        for(Map.Entry<Integer, Product> supplierEntry : supplierMap.entrySet()) {
            String name = supplierEntry.getValue().getProductName();
            int id = supplierEntry.getKey();
            
            products[index++] = name;
            this.products.put(name, id);
        }
        
        AutoCompleteSupport.install(this.jcbProducts, GlazedLists.eventListOf(products));
    }
    
    private void customInitComponents() {
        UIUtils.configureTextField(jtfRate);
        UIUtils.configureTextField(jtfProductQuantity);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfProductQuantity = new org.uikit.MaterialJTextField();
        jLabel2 = new javax.swing.JLabel();
        jlSupplier = new javax.swing.JLabel();
        jcbSuppliers = new org.uikit.KeyValueJComboBox();
        jtfRate = new org.uikit.MaterialJTextField();
        jcbProducts = new org.uikit.KeyValueJComboBox();
        jlProduct = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Raleway", 0, 32)); // NOI18N
        jLabel1.setText("Add Product");

        jtfProductQuantity.setLabelText("Product Quantity : ");
        jtfProductQuantity.setPlaceholderText("Enter the product quantity : ");
        jtfProductQuantity.setPreferredSize(new java.awt.Dimension(961, 81));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Purchase");
        jLabel2.setOpaque(true);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });

        jlSupplier.setFont(new java.awt.Font("Raleway", 1, 20)); // NOI18N
        jlSupplier.setForeground(new java.awt.Color(149, 160, 182));
        jlSupplier.setText("Select a supplier : ");

        jtfRate.setLabelText("Rate of Purchase : ");
        jtfRate.setPlaceholderText("Enter the rate of purchase : ");

        jlProduct.setFont(new java.awt.Font("Raleway", 1, 20)); // NOI18N
        jlProduct.setForeground(new java.awt.Color(149, 160, 182));
        jlProduct.setText("Select aa product : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtfProductQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jlSupplier, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbSuppliers, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlProduct)
                            .addComponent(jcbProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 73, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlSupplier)
                        .addGap(18, 18, 18)
                        .addComponent(jcbSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlProduct)
                        .addGap(18, 18, 18)
                        .addComponent(jcbProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtfRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtfProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 306, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        int supplierId = (this.suppliers.get(this.jcbSuppliers.getSelectedItem().toString()) == null ? -1 : this.suppliers.get(this.jcbSuppliers.getSelectedItem().toString()) );
        int productId = (this.products.get(this.jcbProducts.getSelectedItem().toString()) == null ? -1 : this.products.get(this.jcbProducts.getSelectedItem().toString()) );
        String quantity = this.jtfProductQuantity.getjTextField().getText();
        String rate =  this.jtfRate.getjTextField().getText();
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        
        
        if(supplierId == -1) {
            JOptionPane.showMessageDialog(this, "Please select the correct supplier");
            return;
        } 
        if(productId == -1) {
            JOptionPane.showMessageDialog(this, "Please select the correct supplier");
            return;
        } 
        if(quantity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide the quantity of the product.");
            return;
        }
        if(rate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide the selling price of the product");
            return;
        }
        if(!quantity.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "The quantity should be numeric.");
            return;
        }
        if(!rate.matches("[\\d\\.]+")) {
            JOptionPane.showMessageDialog(this, "The selling price should be decimal only.");
            return;
        }
        
        Purchase purchase = new Purchase();
        
        ArrayList<String> values = new ArrayList<>();
        // Product ID
        values.add(productId + "");
        // Supplier ID
        values.add(supplierId + "");
        // Quantity
        values.add(quantity + "");
        // Rate
        values.add(rate + "");
        // Date
        values.add(date);
        

        int id = purchase.insert(values);
        if(id != -1) {
            JOptionPane.showMessageDialog(this, "Purchased successfully");
            TOClient.sendSMS(new Supplier().getSupplierByID(supplierId).getSupplierPhone(), "A purchase has been made from you of " + quantity + " products.");
        }
    }//GEN-LAST:event_jLabel2MousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private org.uikit.KeyValueJComboBox jcbProducts;
    private org.uikit.KeyValueJComboBox jcbSuppliers;
    private javax.swing.JLabel jlProduct;
    private javax.swing.JLabel jlSupplier;
    private org.uikit.MaterialJTextField jtfProductQuantity;
    private org.uikit.MaterialJTextField jtfRate;
    // End of variables declaration//GEN-END:variables
}
