/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package todphod.ui.components;

import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.swing.AutoCompleteSupport;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.uikit.KeyValueJComboBox;
import todphod.core.Category;
import todphod.core.Product;
import todphod.ui.UIUtils;

/**
 *
 * @author gauravpunjabi
 */
public class ProductOrderPanel extends javax.swing.JPanel {
    public static int WIDTH = 965;
    public static int HEIGHT = 50;
    
    private Map<String, Integer> products;
    private int selectedProduct;
    
    private int productId, quantity, price;
    double GST,totalPrice;
    DecimalFormat formatter;

    /**
     * Creates new form ProductOrderPanel
     */
    public ProductOrderPanel() {
        initComponents();
        
        this.products = new HashMap<>();
        
        this.setSize(WIDTH, HEIGHT);
        this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        Color activeColor = new Color(68,151,255);
        Color inactiveColor = new Color(149, 160, 182);
        UIUtils.styleTextField(jtfQuantity, jsQuantity, "0", inactiveColor, activeColor);
        
        // Addding the Document Listener
        // TODO : Replace the anonymouse implmentation with a cleaner version
        this.jtfQuantity.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                if(!Character.isDigit(e.getKeyChar())) {
                    e.consume();
                }
            }
            @Override
            public void keyPressed(KeyEvent e) {
            }
            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        
        this.jtfQuantity.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                textFieldUpdated();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textFieldUpdated();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textFieldUpdated();
            }
        });
        
        this.getAllProducts();
    }
    
    private void textFieldUpdated() {
        if(this.selectedProduct != -1) {
            String text = this.jtfQuantity.getText();
            int quantity = text.equals("") ? 0 : Integer.parseInt(text);
//            this.jtfQuantity.setText(quantity + "");
            Product product = new Product();
            Product currentProduct = product.getProductByID(this.selectedProduct);
            Double price = currentProduct == null ? 0.00 : currentProduct.getProductSellingPrice();
            
            
            formatter = new DecimalFormat("#0.00");
            totalPrice = price * quantity;
            GST = totalPrice/9.3;
            totalPrice += GST; 
            this.jlPrice.setText(formatter.format(totalPrice) + "");
        }
    }
    
    private void getAllProducts() {
        this.products = new HashMap<>();
        Product product = new Product();
        Map<Integer, Product> productMap = product.getAllProducts();
        
        String products[] = new String[productMap.keySet().size()];
        int index = 0;
        for(Map.Entry<Integer, Product> productEntry : productMap.entrySet()) {
            String name = productEntry.getValue().getProductName();
            int id = productEntry.getKey();
            
            products[index++] = name;
            this.products.put(name, id);
        }
        
        AutoCompleteSupport.install(this.jcbProducts, GlazedLists.eventListOf(products));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbProducts = new org.uikit.KeyValueJComboBox();
        jsQuantity = new javax.swing.JSeparator();
        jtfQuantity = new javax.swing.JTextField();
        jlPrice = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(253, 253, 253));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(235, 238, 242), 1, true));
        setLayout(null);

        jcbProducts.setFont(new java.awt.Font("Raleway", 0, 18)); // NOI18N
        jcbProducts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbProductsItemStateChanged(evt);
            }
        });
        jcbProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProductsActionPerformed(evt);
            }
        });
        add(jcbProducts);
        jcbProducts.setBounds(6, 10, 410, 30);

        jsQuantity.setBackground(new java.awt.Color(0, 198, 255));
        jsQuantity.setForeground(new java.awt.Color(0, 198, 255));
        add(jsQuantity);
        jsQuantity.setBounds(470, 37, 200, 10);

        jtfQuantity.setBackground(new java.awt.Color(253, 253, 253));
        jtfQuantity.setFont(new java.awt.Font("Raleway", 0, 18)); // NOI18N
        jtfQuantity.setForeground(new java.awt.Color(0, 198, 255));
        jtfQuantity.setText("jTextField1");
        jtfQuantity.setBorder(null);
        add(jtfQuantity);
        jtfQuantity.setBounds(470, 7, 200, 30);

        jlPrice.setFont(new java.awt.Font("Raleway", 1, 20)); // NOI18N
        jlPrice.setForeground(new java.awt.Color(0, 198, 255));
        jlPrice.setText("0.0");
        add(jlPrice);
        jlPrice.setBounds(730, 13, 210, 24);

        jSeparator1.setBackground(new java.awt.Color(235, 238, 242));
        jSeparator1.setForeground(new java.awt.Color(235, 238, 242));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator1);
        jSeparator1.setBounds(710, 0, 50, 60);

        jSeparator2.setBackground(new java.awt.Color(235, 238, 242));
        jSeparator2.setForeground(new java.awt.Color(235, 238, 242));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator2);
        jSeparator2.setBounds(440, 0, 12, 60);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProductsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbProductsActionPerformed

    private void jcbProductsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbProductsItemStateChanged
        if(this.jcbProducts.getSelectedIndex() != -1) {
            String productName = this.jcbProducts.getSelectedItem().toString();
            this.selectedProduct = this.products.get(productName);
        } else {
            this.selectedProduct = -1;
        }
    }//GEN-LAST:event_jcbProductsItemStateChanged

    public KeyValueJComboBox getJcbCategories() {
        return jcbProducts;
    }

    public void setJcbCategories(KeyValueJComboBox jcbCategories) {
        this.jcbProducts = jcbCategories;
    }

    public JLabel getJlPrice() {
        return jlPrice;
    }

    public void setJlPrice(JLabel jlPrice) {
        this.jlPrice = jlPrice;
    }

    public JSeparator getJsQuantity() {
        return jsQuantity;
    }

    public void setJsQuantity(JSeparator jsQuantity) {
        this.jsQuantity = jsQuantity;
    }

    public JTextField getJtfQuantity() {
        return jtfQuantity;
    }

    public void setJtfQuantity(JTextField jtfQuantity) {
        this.jtfQuantity = jtfQuantity;
    }

    
    public int getQuantity() {
        return this.quantity;
    }
    
    public int getProductId() {
        return this.selectedProduct;
    }
    
    public int getPrice() {
        return price;
    }
    
    public double getGST() {
        return GST;
    }
    
    public double getTotalPrice() {
        return totalPrice;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private org.uikit.KeyValueJComboBox jcbProducts;
    private javax.swing.JLabel jlPrice;
    private javax.swing.JSeparator jsQuantity;
    private javax.swing.JTextField jtfQuantity;
    // End of variables declaration//GEN-END:variables
}
